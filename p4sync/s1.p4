/* -*- P4_16 -*- */

#include <core.p4>
#include <v1model.p4>
const bit<16> TYPE_IPV4 = 0x0800;

#include "./includes/common.p4"

const bit<8>  TCP_PROTOCOL = 6;
const bit<8>  MIGRATION_PROTOCOL = 251;
const bit<8>  ICMP_PROTOCOL = 1;
const bit<8>  SIGNATURE_PROTOCOL = 253;

// For siphash
// Copy from SPINE code
const bit<64> const_1 = 0x736f6d6570736575;
const bit<64> const_2 = 0x646f72616e646f6d;
const bit<64> const_3 = 0x6c7967656e657261;
const bit<64> const_4 = 0x7465646279746573;
// Generated by siphash_key_generator.py
const bit<64> key1 = 3597013258797167272;
const bit<64> key2 = 7987411727713180468;



/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4>  version;
    bit<4>  ihl;
    bit<8>  diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3>  flags;
    bit<13> fragOffset;
    bit<8>  ttl;
    bit<8>  protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
}

header tcp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4>  dataOffset;
    bit<3>  res;
    bit<3>  ecn;
    bit<6>  ctrl;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}


header migration_t {
    bit<8> protocol;
    bit<8> stage;
    bit<16> index;
    bit<32> state;
    bit<64> mac; // signature of state + index + mac_last
    bit<32> verify; // the verification result of the mac, filled by s3
    bit<16> mainProg;
    bit<16> deltaProg;
}

header signature_t {
    bit<8> protocol;
    bit<1024> sign;
}

struct headers {
    ethernet_t ethernet;
    ipv4_t     ipv4;
    migration_t   migration;
    signature_t[1] signature;
    tcp_t      tcp;
}

struct metadata {
    bit<64> v0;
    bit<64> v1;
    bit<64> v2;
    bit<64> v3;
    bit<64> mac;
}
/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_IPV4           :parse_ipv4;
            default: accept;
        }
    }


    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition select(hdr.ipv4.protocol) {
            TCP_PROTOCOL   : parse_tcp;
            MIGRATION_PROTOCOL: parse_migration;
            default: accept;
        }
    }

    state parse_migration {
        packet.extract(hdr.migration);
        transition select(hdr.migration.protocol) {
            TCP_PROTOCOL   : parse_tcp;
            SIGNATURE_PROTOCOL: parse_signature;
            default: accept;
        }
    }

    state parse_signature {
        packet.extract(hdr.signature.next);
        transition accept;
    }

    state parse_tcp {
        packet.extract(hdr.tcp);
        transition accept;
    }
}

/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/


control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    // The register to be migrated, count the number of packets of each flow
    register <bit<32>>(REGISTER_SIZE) flowsize;
    // The delta array
    register <bit<32>>(REGISTER_SIZE) deltaflowsize;

    // 1: stage 1 --> migrate packets for main register arrary
    // 2: stage 2 --> migrate packets for delta register array
    register <bit<8>>(1) stage;
    // The migration progress of the main array
    register <bit<16>>(1) mainprogress;
    // The migration progress of the delta array
    register <bit<16>>(1) deltaprogress;
    // The mac of last packet
    register <bit<64>>(1) lastmac;

    // Helper function for SipHash
    action sip_round() {
        meta.v0 = meta.v0 + meta.v1;
        meta.v2 = meta.v2 + meta.v3;
        meta.v1 = (bit<64>) (meta.v1 << 13);
        meta.v3 = (bit<64>) (meta.v3 << 16);
        meta.v1 = meta.v1 ^ meta.v0;
        meta.v3 = meta.v3 ^ meta.v2;
        meta.v0 = (bit<64>) (meta.v0 << 32);
        meta.v2 = meta.v2 + meta.v1;
        meta.v0 = meta.v0 + meta.v3;
        meta.v1 = (bit<64>) (meta.v1 << 17);
        meta.v3 = (bit<64>) (meta.v3 << 21);
        meta.v1 = meta.v1 ^ meta.v2;
        meta.v3 = meta.v3 ^ meta.v0;
        meta.v2 = (bit<64>) (meta.v2 << 32);
    }

    // Performs SipHash: c = 1. d = 2
    // Look at figure 2.1 in the siphash paper: https://131002.net/siphash/siphash.pdf
    action sip_hash(bit<64> message0, bit<64> message1) {
        meta.v0 = key1 ^ const_1;
        meta.v1 = key2 ^ const_2;
        meta.v2 = key1 ^ const_3;
        meta.v3 = key2 ^ const_4;

        meta.v3 = meta.v3 ^ message0;
        sip_round();
        meta.v0 = meta.v0 ^ message0;
        meta.v3 = meta.v3 ^ message1;
        sip_round();
        meta.v0 = meta.v0 ^ message1;
        meta.v2 = meta.v2 ^ 0x00000000000000ff;
        sip_round();
        sip_round();

        meta.mac = meta.v0 ^ meta.v1 ^ meta.v2 ^ meta.v3;
    }


    apply {
        bool validpkt = (hdr.ipv4.isValid() && hdr.ipv4.ttl > 0);

        if (validpkt && (hdr.ipv4.protocol == ICMP_PROTOCOL
                    || hdr.ipv4.protocol == TCP_PROTOCOL || hdr.ipv4.protocol == MIGRATION_PROTOCOL)){
            //set_nhop_tab.apply();
        } else {
            mark_to_drop();
        }

        // handle normal TCP packet
        if (validpkt && hdr.ipv4.protocol == TCP_PROTOCOL){
            // packets from TCP sender
            if (standard_metadata.ingress_port == 1){
                // forward to h4
                standard_metadata.egress_spec = 4;

                bit<32> index;
                hash(index, HashAlgorithm.crc16, (bit<32>)0,
                    {hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.tcp.srcPort, hdr.tcp.dstPort}, (bit<32>)REGISTER_SIZE);


                bit<8> stageVal;
                stage.read(stageVal, 0);
                // migrate main register array, updates write to delta if less than progress
                if (stageVal == 1){
                    bit<16> mainprogressVal;
                    mainprogress.read(mainprogressVal, 0);
                    if ((bit<32>)mainprogressVal < index){
                        bit<32> value;
                        flowsize.read(value, index);
                        value = value + 1;
                        flowsize.write(index, value);
                    } else {
                        bit<32> value;
                        deltaflowsize.read(value, index);
                        value = value + 1;
                        deltaflowsize.write(index, value);
                    }
                }
                // migrate delta register array, updates write to the main register array
                else if (stageVal == 2){
                    bit<32> value;
                    flowsize.read(value, index);
                    value = value + 1;
                    flowsize.write(index, value);
                }
            }
        }

        // Handle migration packets
        else if (validpkt && hdr.ipv4.protocol == MIGRATION_PROTOCOL && hdr.migration.protocol != SIGNATURE_PROTOCOL){
            bit<8> stageVal = hdr.migration.stage;
            stage.write(0, hdr.migration.stage);

            // Migrate the main array
            if (stageVal == 1){
                bit<16> mainprogressVal;
                mainprogress.read(mainprogressVal, 0);
                hdr.migration.mainProg = mainprogressVal;
                flowsize.read(hdr.migration.state, (bit<32>)hdr.migration.index);
                mainprogressVal = mainprogressVal + 1;
                mainprogress.write(0, mainprogressVal);
            }
            // Migrate the delta array
            else if (stageVal == 2) {
                bit<16> deltaprogressVal;
                deltaprogress.read(deltaprogressVal, 0);
                hdr.migration.deltaProg = deltaprogressVal;
                deltaflowsize.read(hdr.migration.state, (bit<32>)hdr.migration.index);
                deltaprogressVal = deltaprogressVal + 1;
                deltaprogress.write(0, deltaprogressVal);
            }


            bit<64> message0;
            lastmac.read(message0, 0);
            bit<64> message1;
            bit<64> stagehdr = (bit<64>)hdr.migration.stage;
            bit<64> protocol = (bit<64>)hdr.migration.protocol;
            bit<64> index = (bit<64>)hdr.migration.index;
            bit<64> state = (bit<64>)hdr.migration.state;
            message1 = (stagehdr << 56);
            message1 = message1 + (protocol << 48);
            message1 = message1 + (index << 32);
            message1 = message1 + state;

            sip_hash(message0, message1);
            hdr.migration.mac = meta.mac;
            lastmac.write(0, meta.mac);



            if (hdr.migration.stage == 2 && hdr.migration.index == REGISTER_SIZE - 1){
                // forward to RSA sender
                standard_metadata.egress_spec = 3;
                hdr.signature.push_front(1);
                hdr.signature[0].setValid();
                hdr.signature[0].protocol = 1;
                hdr.signature[0].sign = 0;
                hdr.migration.protocol = SIGNATURE_PROTOCOL;
                hdr.ipv4.totalLen = hdr.ipv4.totalLen + 129;

            } else {
                // forward to h5
                standard_metadata.egress_spec = 5;
            }
        }
        // received packets from RSA sender
        else if (validpkt && hdr.ipv4.protocol == MIGRATION_PROTOCOL && hdr.migration.protocol == SIGNATURE_PROTOCOL){
            // forward to h5
            standard_metadata.egress_spec = 5;
        }
    }
}


/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply {    }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
	update_checksum(
	    hdr.ipv4.isValid(),
            { hdr.ipv4.version,
	          hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16);
    }
}

/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv4);
        packet.emit(hdr.migration);
        packet.emit(hdr.signature);
        packet.emit(hdr.tcp);
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;